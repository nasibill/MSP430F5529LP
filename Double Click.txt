#include "msp430.h"
volatile unsigned int time_stuck=0;
volatile unsigned int b_pressed=0;
volatile unsigned int b2_pressed=0;
int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;          // Stop watchdog timer
  TA0CCTL0 = CCIE;                  // CCR0 interrupt enabled
  TA0CTL = TASSEL_2 | MC_1 | ID_3;      // SMCLK/8, upmode
  TA0CCR0 = 40000;                  // Blink the LEDs every ~1sec
  P1DIR |= 0x01;            // Set P1.0 to output direction
  P4DIR |= 0x80;            // Set P4.7 to output direction
  P2REN |= BIT1;            // Enable internal pull-up/down resistors for P2
  P2OUT |= BIT1;            //Select pull-up mode for P2.1
  P2IE |= BIT1;             // P2.1 interrupt enabled
  P2IES &= ~BIT1; // P2.1 P2IES &= ~BIT1 -> Lo/hi edge, P2IES |= BIT1 -> Hi/lo edge
  P2IFG &= ~BIT1;           // P2.1 IFG cleared
  P1REN |= BIT1;        // Enable internal pull-up/down resistors for P2
  P1OUT |= BIT1;        //Select pull-up mode for P1.1
  P1IE |= BIT1;         // P1.1 interrupt enabled
  P1IES &= ~BIT1; // P1.1 P2IES &= ~BIT1 -> Lo/hi edge, P1IES |= BIT1 -> Hi/lo edge
  P1IFG &= ~BIT1;       // P1.1 IFG cleared
 _BIS_SR(GIE);          // Enter w/ interrupt
  volatile unsigned int freeze=1;
  volatile unsigned int d_freq=0;
  volatile unsigned int i=0;
  volatile unsigned int time_count=0;
  volatile unsigned int cycle_count=0;
  for (;;)
  {
  if(b_pressed) {          //set state
              freeze=!freeze;  //togle state
              b_pressed=0;
  }
  if(b2_pressed) {   //set frequency
          d_freq=!d_freq;
          b2_pressed=0;
  }
  if(!freeze){

      if (time_stuck==1) {
          time_stuck=0;
          cycle_count++;
          if (d_freq) {    //if in double frequency toggle GREEN LED
                  P4OUT ^=0x80;}
          if (cycle_count==2) {
              cycle_count=0;
              P1OUT ^=0x01;  // toggle RED LED(every ~1 sec)
              if (!d_freq) P4OUT ^=0x80;
              }
      }
   }

  } //end for
 return 0;
}
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0 (void)
{
time_stuck=1; // Signal timer event
}
// Port 2 interrupt service routine
#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
static unsigned int debounce = 0;
while(debounce <= 500)
debounce++;
b2_pressed= 1; // Toggle P2.1 -> Button 2 pressed and released
debounce = 0;
P2IFG &= ~BIT1; // P2.1 IFG cleared
}
// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
static unsigned int debounce = 0;


while(debounce <= 500)
debounce++;

b_pressed= 1; // Toggle P1.1 -> Button 1 pressed and released
debounce = 0;

P1IFG &= ~BIT1; // P1.1 IFG cleared
}
